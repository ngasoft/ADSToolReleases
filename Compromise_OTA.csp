-- channel declaration
channel pro_action_Retrieve_from_vuln_database 
channel pro_action_Connect_to_OTA 
channel pro_action_Write_Backdoor 
channel pro_action_Evade_detection_as_false_negative 
channel pro_action_Lab_research 
channel pro_action_Source_vuln_from_Dark_Web 
channel pro_action_Embed_in_code 
channel opp_action_Maintain_database_of_known_exploits 
channel opp_action_Assess_comms_patterns_for_known_vuln_s 
channel opp_action_Assess_comms_for_baseline_OTA_behaviour 
channel opp_action_Detect_comms_patterns_deviating_from_baseline 


-- ProAct
ProAct = {pro_action_Retrieve_from_vuln_database,pro_action_Connect_to_OTA,pro_action_Write_Backdoor,pro_action_Evade_detection_as_false_negative,pro_action_Lab_research,pro_action_Source_vuln_from_Dark_Web,pro_action_Embed_in_code} 

-- OppAct
OppAct = {opp_action_Maintain_database_of_known_exploits,opp_action_Assess_comms_patterns_for_known_vuln_s,opp_action_Assess_comms_for_baseline_OTA_behaviour,opp_action_Detect_comms_patterns_deviating_from_baseline} 

Act = union(ProAct, OppAct)

-- MainTree definition
T_4 = Leaf.pro_action_Retrieve_from_vuln_database 
T_5 = Leaf.pro_action_Connect_to_OTA 
T_7 = Leaf.opp_action_Maintain_database_of_known_exploits 
T_8 = Leaf.opp_action_Assess_comms_patterns_for_known_vuln_s 
T_6_1 = Sand.T_7.T_8 
T_6 = T_6_1 
P9 = Counter.T_5.T_6 
T_3_1 = Sand.T_4.P9 
T_3 = T_3_1 
T_12 = Leaf.pro_action_Lab_research 
T_13 = Leaf.pro_action_Source_vuln_from_Dark_Web 
T_11_1 = Sand.T_12.T_13 
T_11 = T_11_1 
T_14 = Leaf.pro_action_Connect_to_OTA 
T_16 = Leaf.opp_action_Assess_comms_for_baseline_OTA_behaviour 
T_17 = Leaf.opp_action_Detect_comms_patterns_deviating_from_baseline 
T_15_1 = Sand.T_16.T_17 
T_15 = T_15_1 
P18 = Counter.T_14.T_15 
T_10_1 = Sand.T_11.P18 
T_10 = T_10_1 
T_2_1 = Or.T_3.T_10 
T_2 = T_2_1 
T_21 = Leaf.pro_action_Write_Backdoor 
T_22 = Leaf.pro_action_Embed_in_code 
T_20_1 = Sand.T_21.T_22 
T_20 = T_20_1 
T_23 = Leaf.pro_action_Connect_to_OTA 
T_25 = Leaf.opp_action_Assess_comms_for_baseline_OTA_behaviour 
T_26 = Leaf.opp_action_Detect_comms_patterns_deviating_from_baseline 
T_27 = Leaf.pro_action_Evade_detection_as_false_negative 
P28 = Counter.T_26.T_27 
T_24_1 = Sand.T_25.P28 
T_24 = T_24_1 
P29 = Counter.T_23.T_24 
T_19_1 = Sand.T_20.P29 
T_19 = T_19_1 
T_1_1 = Or.T_2.T_19 
T_1 = T_1_1 
MainTree = T_1


assert RUN(ProAct) [T= [] (p,q,true) : fst(trans(MainTree)) @ p

datatype ADS = Leaf.Act | Or.ADS.ADS | And.ADS.ADS | Sand.ADS.ADS | Counter.ADS.ADS

fst((A,B)) = A
snd((A,B)) = B

transOr(t1,t2) =
  let
    transt1 = trans(t1)
    transt2 = trans(t2)
  within
    (union(fst(transt1),fst(transt2)),snd(transt1) or snd(transt2))

transAnd(t1,t2) =
  let
    transt1 = trans(t1)
    transt2 = trans(t2)
  within
    (
      { (P1 ||| P2, Q1 [] Q2, O1 and O2) | (P1,Q1,O1) <- fst(transt1),
                                           (P2,Q2,O2) <- fst(transt2) },
      snd(transt1) and snd(transt2)
    )

transSand(t1,t2) =
  let
    transt1 = trans(t1)
    transt2 = trans(t2)
  within
  (
    { (P1 ; P2, Q1 [] Q2, O1 and O2) | (P1,Q1,O1) <- fst(transt1),
                                       (P2,Q2,O2) <- fst(transt2) },
    snd(transt1) and snd(transt2)
  )


transCounter(t1,t2) =
  let
    transt1 = trans(t1)
    transt2 = trans(t2)
  within
    (
      union(
        { (P1,Q1[]([] (P2,Q2,O2) : fst(transt2) @ P2),false) |
          (P1,Q1,O1) <- fst(transt1) },
        --
        { (P1|||Q2,
           Q1 [] ([] (P3,Q3,true)  : fst(transt2) @ P3),
           O1 and not(snd(transt2))) |
           (P1,Q1,O1)    <- fst(transt1),
           (P2,Q2,false) <- fst(transt2)}
      ),
      snd(transt1) and not(snd(transt2))
    )

-- Function trans : ADS -> ({(Proc,Proc,Bool)},Bool)
--                                      |     |
--                                      |     true if some 2nd Bool is true
--                                      |
--                                     true if 2nd Proc =T STOP
--
trans(Leaf.x) = ({(x -> SKIP,STOP,true)},true)
trans(Or.t1.t2) = transOr(t1,t2)
trans(And.t1.t2) = transAnd(t1,t2)
trans(Sand.t1.t2) = transSand(t1,t2)
trans(Counter.t1.t2) = transCounter(t1,t2)
